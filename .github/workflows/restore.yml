# Required environment variables:
# - RESTIC_ROOT:  Directory where restic repositories should be stored
#
# Required binaries/tools:
# - restic (https://restic.net/)

name: Restore

on:
  workflow_dispatch:
    inputs:
      date:
        description: 'Either restore snapshot closest to this date (YYYY-MM-DDTHH:MM:SS format, optional)'
        required: false
        type: string
      tag:
        description: 'Or restore latest backup with this tag (optional)'
        required: false
        type: string

jobs:
  verify:
    runs-on: hetzner2
    env:
      RESTIC_PASSWORD: ${{ secrets.RESTIC_PASSWORD }}
      RESTIC_ROOT: ${{ secrets.RESTIC_ROOT }}
    steps:
      - name: Check RESTIC_ROOT is set
        run: |
          if (-not $env:RESTIC_ROOT) {
            Write-Host "RESTIC_ROOT is not set"
            exit 1
          }
        shell: pwsh

      - name: Ensure either date or tag is provided
        run: |
          $date = "${{ github.event.inputs.date }}".Trim()
          $tag = "${{ github.event.inputs.tag }}".Trim()
          if (-not $date -and -not $tag) {
            Write-Host "Either provide the closest date to restore from or a tag to restore"
            exit 1
          }
        shell: pwsh
        
      - name: Set environment variables and RESTIC_REPOSITORY
        run: |
          $REPO_NAME = Split-Path $env:GITHUB_REPOSITORY -Leaf
          $PROJECT_NAME = $REPO_NAME -replace '-by-vincent', ''
          Add-Content -Path $env:GITHUB_ENV -Value "RESTIC_REPOSITORY=$env:RESTIC_ROOT\$PROJECT_NAME"
          Add-Content -Path $env:GITHUB_ENV -Value "PROJECT_NAME=$PROJECT_NAME"
        shell: pwsh
        
      - name: Find snapshots for each volume
        id: volumes
        run: |
          # Find volumes to restore
          docker compose config | Out-File -FilePath config.yml -Encoding utf8
          $mappings = docker run --rm -v "${PWD}:/workdir" mikefarah/yq ".services[].volumes[].source" config.yml
          $unique_mappings = $mappings | Sort-Object | Get-Unique
          $volumes = $unique_mappings | Where-Object { $_ -notmatch '[\\/]' }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "VOLUMES=$($volumes -join ',')"
          Write-Host "Volumes to restore:`n$($volumes -join "`n")"

          # Find snapshots to restore from
          $repo = "$env:RESTIC_REPOSITORY"
          $date = "${{ github.event.inputs.date }}"
          $tag = "${{ github.event.inputs.tag }}"

          foreach ($volume in $volumes) {
            $vol_repo = "$repo\$volume"
            $snapshots = restic -r $vol_repo snapshots --json | ConvertFrom-Json
            if ($tag) {
              $filtered = $snapshots | Where-Object { $_.tags -contains $tag }
              $snapshot = $filtered | Sort-Object -Property time -Descending | Select-Object -First 1
              Write-Host "Using snapshot id $($snapshot.short_id) with tag $tag for volume $($env:PROJECT_NAME)_$volume"
            }
            if ($date) {
              $target = [datetime]::Parse($date)
              $snapshot = $snapshots | Sort-Object { [datetime]$_.time } | `
              Where-Object { [datetime]$_.time -le $target } | Select-Object -Last 1
              Write-Host "Using snapshot id $($snapshot.short_id) closest to $date ($($snapshot.time)) for volume $($env:PROJECT_NAME)_$volume"
            }

            if (-not $snapshot) {
              Write-Host "No matching snapshot found for volume $($env:PROJECT_NAME)_$volume."
              exit 1
            }

            Add-Content -Path $env:GITHUB_OUTPUT -Value "$(($env:PROJECT_NAME)_$volume)_SNAPSHOT_ID=$($snapshot.short_id)"
          }
        shell: pwsh
  restore:
    needs: verify
    runs-on: hetzner2
    environment: production
    env:
      RESTIC_ROOT: ${{ secrets.RESTIC_ROOT }}
      RESTIC_PASSWORD: ${{ secrets.RESTIC_PASSWORD }}
    steps:
      - name: Set environment variables and RESTIC_REPOSITORY
        run: |
          $REPO_NAME = Split-Path $env:GITHUB_REPOSITORY -Leaf
          $PROJECT_NAME = $REPO_NAME -replace '-by-vincent', ''
          Add-Content -Path $env:GITHUB_ENV -Value "RESTIC_REPOSITORY=$env:RESTIC_ROOT\$PROJECT_NAME"
          Add-Content -Path $env:GITHUB_ENV -Value "PROJECT_NAME=$PROJECT_NAME"
        shell: pwsh

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Shut down docker compose
        run: docker compose down
        shell: bash

      - name: Delete all volume content
        run: |
          $volumes = "${{ needs.verify.outputs.VOLUMES }}".Split(',') | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne '' }

          $volumes | ForEach-Object {
            $volume = $_
            Write-Host "Deleting content of volume: $($env:PROJECT_NAME)_$volume"
            docker run --rm -i --mount source=$($env:PROJECT_NAME)_$volume,target=/data alpine sh -c "rm -rf /data/*"
          }
        shell: pwsh

      - name: Restore each volume to temp directory and copy into volume
        run: |
          $repo = "$env:RESTIC_REPOSITORY"
          $volumes = "${{ needs.verify.outputs.VOLUMES }}".Split(',') | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne '' }

          $volumes | ForEach-Object {
            $volume = $_
            $tmp = Join-Path $env:TEMP ([guid]::NewGuid().ToString())
            mkdir $tmp | Out-Null
            Write-Host "Restoring $($env:PROJECT_NAME)_$volume to $tmp"
            restic -r "$repo\$volume" restore $env:$(($env:PROJECT_NAME)_$volume)_SNAPSHOT_ID --target "$tmp" --include "/"
            Write-Host "Copying restored data to $($env:PROJECT_NAME)_$volume"
            docker run --rm `
              -v "$tmp:/from" `
              -v "$($env:PROJECT_NAME)_$volume:/to" `
              alpine sh -c "cp -a /from/. /to/"
          }
        shell: pwsh

      # - name: Start docker compose
      #   run: docker compose up -d --pull always
      #   shell: bash
